@import "./shared";

/// @alias restyle-define
@function -restyle--define($name, $definition: null, $placeholder: null) {
  // clear the cache
  $-restyle--patterns-cache: () !global;
  $start-time: -restyle--timer-for-logging("time:define");

  @if (map-get($-restyle--registered-patterns, $name)) {
    @warn "A component named `#{$name}` already exists";
  }

  // add the name to the known types...
  $-restyle--registered-types: append($-restyle--registered-types, $name) !global;
  $-restyle--is-registered-types-dirty: true !global; // mark it as dirty

  // add the definition to the map...
  $-restyle--registered-patterns: map-merge($-restyle--registered-patterns, (
    #{$name}: $definition
  )) !global;
  $-restyle--is-registered-patterns-dirty: true !global; // mark it as dirty

  @if ($placeholder) {
    $-restyle--registered-pattern-placeholders: map-merge($-restyle--registered-pattern-placeholders, (
      #{$name}: $placeholder
    )) !global;
  }

  $tmp: -restyle--log("took {time} to add definition for `#{$name}`", "time:define", (
    time: -restyle--timer-for-logging("time:define", $start-time)
  ));

  $tmp: -restyle--log("defined `#{$name}` as {definition}", "define", (
    definition: inspect($definition)
  ));

  @return true;
}

/// @alias restyle-define
@mixin -restyle--define($name, $definition: null) {
  $placeholder: null;
  @if not -restyle--config(ignore-defined-content) {
    $placeholder: -restyle--placeholder-name($name);
    @at-root #{$placeholder} {
      @content;
    }
  }
  $tmp: -restyle--define($name, $definition, $placeholder: $placeholder);
}
